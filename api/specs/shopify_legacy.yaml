name: "Shopify API"
description: "API for extracting data from Shopify e-commerce platform. See https://shopify.dev/docs/api/admin-rest."

# Queues for passing values between endpoints
queues:
  - customer_ids
  - order_ids
  - product_ids
  - variant_ids
  - collection_ids

defaults:
  state:
    base_url: "https://{secrets.shop_name}.myshopify.com/admin/api/2025-04"
    limit: 250
  
  request:
    method: "GET"
    headers:
      Accept: "application/json"
      X-Shopify-Access-Token: '{secrets.access_token}'
      Content-Type: "application/json"
    parameters:
      limit: '{state.limit}'
    rate: 20        # Default rate limit of 20 requests per second
    concurrency: 5  # Default concurrency of 5
    
  pagination:
    next_state:
      # see https://shopify.dev/docs/api/admin-rest/usage/pagination
      url: >
         { 
            if(
              response.headers.link == null,
              state.url,
              if(
                length(split(response.headers["link"], " ")) == 2,
                trim(split_part(response.headers.link, " ", 0), "<>;"),
                trim(split_part(response.headers.link, " ", 2), "<>;")
              )
            )
          }
      updated_at_min: null  # unset for next page parameter
      status: null          # unset for next page parameter
      limit: null           # unset for next page parameter
      created_at_min: null           # unset for next page parameter
      created_at_max: null           # unset for next page parameter
    
    stop_condition: '!contains(jmespath(response.headers, "link"), "rel=\"next\"")'


endpoints:
  shop:
      description: "Retrieve shop information"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/shop
      
      request:
        url: '{state.base_url}/shop.json'
      
      response:
        records:
          jmespath: "shop"
          primary_key: ["id"]

  product:
      description: "Retrieve list of products"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/product
      
      state:
        url: "{state.base_url}/products.json"  # Initial URL or next URL from pagination
        updated_at_min: '{coalesce(env.UPDATED_AT_MIN, date_format(date_add(now(), -30, "day"), "%Y-%m-%dT%H:%M:%S%z"))}'
      
      sync: [ last_id ]
      
      request:
        url: '{state.url}'
        parameters:
          limit: '{state.limit}'
          updated_at_min: '{state.updated_at_min}'

      
      response:
        records:
          jmespath: "products[]"
          primary_key: ["id"]
        
        processors:
          - expression: "record.id"
            output: "state.last_id"
            aggregation: "last"
          
          - expression: "record.id"
            output: "queue.product_ids"

  product_variant:
      description: "Retrieve product variants"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/product-variant
      
      state:
        url: "{state.base_url}/product_variants.json"  # Initial URL or next URL from pagination
        updated_at_min: '{coalesce(env.UPDATED_AT_MIN, date_format(date_add(now(), -30, "day"), "%Y-%m-%dT%H:%M:%S%z"))}'
      
      sync: [ last_id ]
      
      request:
        url: '{state.url}'
        parameters:
          limit: '{state.limit}'
          updated_at_min: '{state.updated_at_min}'
      

      
      response:
        records:
          jmespath: "product_variants[]"
          primary_key: ["id"]
        
        processors:        
          - expression: "record.id"
            output: "queue.variant_ids"

  product_image:
      description: "Retrieve product images"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/product-image

      # Loop over each product id processed
      iterate:
        over: "queue.product_ids"
        into: "state.product_id"
      
      request:
        url: '{state.base_url}/products/{state.product_id}/images.json'
      
      response:
        records:
          jmespath: "images[]"
          primary_key: ["id"]
        
        processors:
          - expression: "state.product_id"
            output: "record.product_id"

  collection:
      description: "Retrieve list of custom collections"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/customcollection
      
      state:
        url: "{state.base_url}/custom_collections.json"  # Initial URL or next URL from pagination
      
      sync: [ last_id ]
      
      request:
        url: '{state.url}'
        parameters:
          limit: '{state.limit}'
      

      
      response:
        records:
          jmespath: "custom_collections[]"
          primary_key: ["id"]
        
        processors:
          - expression: "record.id"
            output: "state.last_id"
            aggregation: "last"
          
          - expression: "record.id"
            output: "queue.collection_ids"

  smart_collection:
      description: "Retrieve list of smart collections"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/smartcollection
      
      state:
        url: "{state.base_url}/smart_collections.json"  # Initial URL or next URL from pagination
      
      sync: [ last_id ]
      
      request:
        url: '{state.url}'
        parameters:
          limit: '{state.limit}'
      

      
      response:
        records:
          jmespath: "smart_collections[]"
          primary_key: ["id"]
        
        processors:
          - expression: "record.id"
            output: "state.last_id"
            aggregation: "last"
          
          - expression: "record.id"
            output: "queue.collection_ids"

  order:
      description: "Retrieve list of orders"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/order
      
      state:
        start_date: '{ coalesce(env.START_DATE, "2025-04-01") }'
        url: "{state.base_url}/orders.json"  # Initial URL or next URL from pagination
        updated_at_min: '{coalesce(env.UPDATED_AT_MIN, sync.last_updated_at, date_format(date_add(now(), -30, "day"), "%Y-%m-%dT%H:%M:%S%z"))}'
        status: any
        created_at_min: '{ date_format(state.day_start, "%Y-%m-%dT%H:%M:%S%z") }'
        created_at_max: '{ date_format(date_add(state.day_start, 1, "day"), "%Y-%m-%dT%H:%M:%S%z") }'
      
      sync: [ last_updated_at ]

      iterate:
        over: >
          range(
            date_trunc(date_add(now(), -30, "day"), "day"),
            date_trunc(now(), "day"),
            "1d"
          )
        into: state.day_start
        concurrency: 20
      
      request:
        
        url: '{state.url}'
        parameters:
          limit: '{state.limit}'
          # updated_at_min: '{state.updated_at_min}'
          status: '{state.status}'
          created_at_min: '{ state.created_at_min }'
          created_at_max: '{ state.created_at_max }'

      response:
        records:
          jmespath: "orders[]"
          primary_key: ["id"]
        
        processors:
          - expression: "record.updated_at"
            output: "state.last_updated_at"
            aggregation: "last"
          
          - expression: "record.id"
            output: "queue.order_ids"


  order_transaction:
      description: "Retrieve order transactions"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/transaction

      # Loop over each order id processed
      iterate:
        over: "queue.order_ids"
        into: "state.order_id"
      
      request:
        url: '{state.base_url}/orders/{state.order_id}/transactions.json'

      
      response:
        records:
          jmespath: "transactions[]"
          primary_key: ["id"]
        
        processors:
          - expression: "state.order_id"
            output: "record.order_id"

  refund:
      description: "Retrieve order refunds"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/refund

      # Loop over each order id processed
      iterate:
        over: "queue.order_ids"
        into: "state.order_id"
      
      request:
        url: '{state.base_url}/orders/{state.order_id}/refunds.json'
      
      response:
        records:
          jmespath: "refunds[]"
          primary_key: ["id"]
        
        processors:
          - expression: "state.order_id"
            output: "record.order_id"

  customer:
      description: "Retrieve list of customers"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/customer
      
      state:
        url: "{state.base_url}/customers.json"  # Initial URL or next URL from pagination
        updated_at_min: '{coalesce(env.UPDATED_AT_MIN, date_format(date_add(now(), -30, "day"), "%Y-%m-%dT%H:%M:%S%z"))}'
      
      sync: [ last_id ]
      
      request:
        url: '{state.url}'
        parameters:
          limit: '{state.limit}'
          updated_at_min: '{state.updated_at_min}'
      

      
      response:
        records:
          jmespath: "customers[]"
          primary_key: ["id"]
        
        processors:
          - expression: "record.id"
            output: "state.last_id"
            aggregation: "last"
          
          - expression: "record.id"
            output: "queue.customer_ids"

  customer_address:
      description: "Retrieve customer addresses"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/customer-address

      # Loop over each customer id processed
      iterate:
        over: "queue.customer_ids"
        into: "state.customer_id"
      
      request:
        url: '{state.base_url}/customers/{state.customer_id}/addresses.json'
      
      response:
        records:
          jmespath: "addresses[]"
          primary_key: ["id"]
        
        processors:
          - expression: "state.customer_id"
            output: "record.customer_id"

  customer_order:
      description: "Retrieve customer orders"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/order

      # Loop over each customer id processed
      iterate:
        over: "queue.customer_ids"
        into: "state.customer_id"
      
      request:
        url: '{state.base_url}/customers/{state.customer_id}/orders.json'
        parameters:
          status: "any"  # Get both open and closed orders
      
      response:
        records:
          jmespath: "orders[]"
          primary_key: ["id"]
        
        processors:
          - expression: "state.customer_id"
            output: "record.customer_id"

  inventory_item:
      description: "Retrieve inventory items"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/inventoryitem
        
      iterate:
        # Process variants in batches of 50 (Shopify limit for comma-separated IDs)
        over: "chunk(queue.variant_ids, 50)"
        into: "state.variant_ids"
      
      request:
        url: '{state.base_url}/inventory_items.json'
        parameters:
          ids: '{join(state.variant_ids, ",")}'
      
      response:
        records:
          jmespath: "inventory_items[]"
          primary_key: ["id"]

  inventory_level:
      description: "Retrieve inventory levels"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/inventorylevel
        
      iterate:
        # Process variants in batches of 50 (Shopify limit for comma-separated IDs)
        over: "chunk(queue.variant_ids, 50)"
        into: "state.variant_ids"
      
      request:
        url: '{state.base_url}/inventory_levels.json'
        parameters:
          inventory_item_ids: '{join(state.variant_ids, ",")}'
      
      response:
        records:
          jmespath: "inventory_levels[]"
          primary_key: ["inventory_item_id", "location_id"]

  abandoned_checkout:
      description: "Retrieve abandoned checkouts"
      docs: https://shopify.dev/docs/api/admin-rest/2025-04/resources/abandoned-checkouts
      
      state:
        url: "{state.base_url}/checkouts.json"  # Initial URL or next URL from pagination
        updated_at_min: '{coalesce(env.UPDATED_AT_MIN, date_format(date_add(now(), -30, "day"), "%Y-%m-%dT%H:%M:%S%z"))}'
      
      sync: [ last_id ]
      
      request:
        url: '{state.url}'
        parameters:
          limit: '{state.limit}'
          updated_at_min: '{state.updated_at_min}'
          status: "any"
      
      response:
        records:
          jmespath: "checkouts[]"
          primary_key: ["id"]
        
        processors:
          - expression: "record.id"
            output: "state.last_id"
            aggregation: "last" 